//----------- Basic definitions for Asciidoc --------------
:title: Analyse de diagrammes SysML
:keywords: SysML Ingénierie Systèmes
:Author: Jean-Michel Bruel 
:Author Initials: JMB
:Email: bruel@irit.fr
:Revision: 1.1
:localdate: {sys: date +%d/%m/%Y}
:date: {localdate}
:startdate: 26/07/2012
:images: ../images
:dessins: dessins
:toc_title: Table des matières
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by Asciidoc and W3C Slidy &#169; 
:incremental!:
:indir: dessins

//----------- dck.js --------------
// swiss, neon beamer
:deckjs_theme: web-2.0 

//fade, horizontal-slide, vertical-slide
:deckjs_transition: horizontal-slide

///////////////////////
	AsciiDoc use `source-highlight` as default highlighter.

	Styles available for pygment highlighter:
	monokai, manni, perldoc, borland, colorful, default, murphy, vs, trac,
	tango, fruity, autumn, bw, emacs, vim, pastie, friendly, native,

	Uncomment following two lines if you want to highlight your code
	with `Pygments`.
///////////////////////
//:pygments:
//:pygments_style: native
///////////////////////
	Uncomment following line if you want to scroll inside slides
	with {down,up} arrow keys.
///////////////////////
:scrollable:
///////////////////////
	Uncomment following line if you want to link css and js file 
	from outside instead of embedding them into the output file.
///////////////////////
//:linkcss:

= {title}

include::definitions.asc[]

:numbered:

//================================================================
// Plan
//================================================================

ifdef::deckjs[]
== Contexte
endif::deckjs[]

image::images/logo-Sysml-France.png[]

Quelques notes sur des diagrammes {SysML} réalisés dans le cadre de la réforme
des programmes de prépa.

Les commentaires n'engagent que l'auteur et ne visent pas à critiquer
les auteurs de certains diagrammes cités en exemples mais plutôt à illustrer la difficulté
à modéliser.

Dans ce qui suit, j'ai utilisé les conventions suivantes pour les diagrammes :


[icon="images/icons/appbar.weather.thunder.png"]
[NOTE]
====
Modélisation SysML incorrecte.
====

[icon="images/icons/appbar.weather.overcast.png"]
[NOTE]
====
Modélisation SysML partiellement correcte ou pouvant prêter à confusion.
====

[icon="images/icons/appbar.weather.sun.png"]
[NOTE]
====
Modélisation SysML correcte.
====

<<<<

//===========================================================================
== Respect des notations SysML

Je recommande vraiment l'utilisation d'outils (même de dessins, mais dédié à) {sysml}.
Ils respectent en général la norme {norme} (bien qu'il faille se méfier).
Eviter de "dessiner" des diagrammes. 

ifdef::deckjs[]
:leveloffset: -1
endif::deckjs[]

Par contre la norme permet de faire des adaptations graphiques (cf. la discussion http://www.realtimeatwork.com/2011/08/is-sysml-too-abstract/).

=== Diagramme de bloc

Par exemple dans ce diagramme les blocs ne respectent
pas la syntaxe graphique de {SysML} :

.Erreur : mauvais symboles graphiques pour les blocs
[icon="images/icons/appbar.weather.thunder.png"]
[NOTE]
====
image::images/cordeuseContext.png[]
====

Pour rappel, la notation +jmb : Personne+ permet de représenter un *objet* (une instance d'une classe ou d'un bloc).
C'est donc une notation utilisée par exemple dans les participants d'un diagramme de séquence ou encore les parties
d'un diagramme interne de bloc.

Donc dans le diagramme ci-dessus, l'acteur est correct (on peut mettre des acteurs dans un {BDD}, cf. OMG SysML v1.3 p.32), par contre
les objets +Block : ...+ est une erreur de notation.
 
.Solution : utiliser un outil (ici BOUML)
[icon="images/icons/appbar.weather.sun.png"]
[NOTE]
====
image::plantuml/cordeuseContext.png[]
====

[WARNING]
====
Attention, il est tout à fait possible de représenter des instances dans un {bdd} (cf. OMG SysML v1.3 p.34), 
même si c'est très peu courant.
====

=== Diagramme de séquence

.Erreur : pb avec les participants et la boucle
[icon="images/icons/appbar.weather.thunder.png"]
[NOTE]
====
image::images/cordeuseSeqBad.png[]
====

Plusieurs problèmes de non respect de la notation :

- il manque le rectangle aux participants
- les participants semblent être des blocs et non des instances
- la boucle devrait avoir une condition (même "toujours" pour une boucle infinie)

[NOTE]
====
Le dernier problème est plus une convention qu'une véritable erreur. Cf. <<Conventions>>.
====

ifdef::deckjs[]
:leveloffset: 0
endif::deckjs[]

<<<<

//===========================================================================
== Diagramme des cas d'utilisation

ifdef::deckjs[]
:leveloffset: -1
endif::deckjs[]

[[Utilisation]]
=== Utilisation du système

.Problème : Fournir n'est pas Obtenir...	
[icon="images/icons/appbar.weather.overcast.png"]
[NOTE]
====
image::images/ucBad.png[]
====

Il vaut mieux définir les cas d'utilisation du point de vue de (ou des) utilisateurs plutôt que du système. Cf. <<Conventions>>.
Pour rappel, un cas d'utilisation est un regroupement de scénarios qui correspondent à un but d'un des acteurs (dans le domaine du problème considéré et selon la granularité envisagée).

Dans le diagramme ci-dessus il aurait fallut écrire :

.Solution : Prendre le point de vue de l'utilisateur
[icon="images/icons/appbar.weather.sun.png"]
[NOTE]
====
image::plantuml/uc7.png[]
====


=== Interaction avec les cas d'utilisation principaux

[[UC1]]
.Diagramme des Cas d'Utilisation erroné	
[icon="images/icons/appbar.weather.thunder.png"]
[NOTE]
====
image::UPSTI/image001.jpg[]
====


.Erreur : oubli d'interaction
[icon="images/icons/appbar.weather.thunder.png"]
[NOTE]
====
Dans le diagramme <<UC1>>, l'acteur +Utilisateur+ n'interagit ni avec le cas +Tendre la corde+ ni avec +Positionner raquette+ !
====

[[UC1bis]]
.Solution (extrait) : Modifier le diagramme en conséquence
[icon="images/icons/appbar.weather.overcast.png"]
[NOTE]
====
image::plantuml/uc1.png[]
La solution n'est que partiellement satisfaisante (cf. point suivant).
====

[NOTE]
====
J'ai fait disparaître le lien entre +Tendre la corde+ et +Corde+, mais uniquement car j'ai déduit de l'exemple
que +Programmer+ n'interagissait pas avec +Corde+. Et donc que +Tendre la corde+ n'interagit avec +Corde+ que dans
le sous-cas d'utilisation +Maintenir la tension+. C'est typiquement une ambiguité que le "client" doit lever.
====

[TIP]
====
L'utilisation de stéréotypes comme `<<TopLevel>>` ou `<<Principal>>` peut permettre d'éviter d'interagir avec ces cas d'utilisation.
====

=== Utilisation des `<<include>>`

Il faut faire attention à ne pas abuser des `<<include>>`.
Par exemple ma recommandation en SysML/UML est de ne jamais avoir ça :

[[UC2]]
.Problème : mauvaise utilisation de l'`<<include>>`
[icon="images/icons/appbar.weather.overcast.png"]
[NOTE]
====
image::plantuml/uc2.png[]
====

Dans la figure <<UC2>>, il n'y a aucune raison de ne pas inclure le cas d'utilisation
+S'identifier+ directement dans le cas d'utilisation +Acheter en ligne+. Et avoir ainsi :

[[UC3]]
.Solution 1 : On englobe les `<<include>>` "isolés"
[icon="images/icons/appbar.weather.sun.png"]
[NOTE]
====
image::plantuml/uc3.png[]
====

J'enseigne qu'un `<<include>>` devrait toujours concerner un cas inclut dans plusieurs autres, comme la figure <<UC4>> :
	
[[UC4]]
.Solution 2 : On "mutualise" les `<<include>>`
[icon="images/icons/appbar.weather.sun.png"]
[NOTE]
====
image::plantuml/uc4.png[]
====

Néanmoins je vois deux raisons valables pour décomposer les cas d'utilisation avec des `<<include>>` qui se retrouvent isolés :
	
1. Pour indiquer que seulement une partie du cas d'utilisation principal interagit avec un acteur (secondaire la plupart du temps).
C'est ce qui est fait dans <<UC1bis>>.

2. Pour faire de la décomposition fonctionnelle (cf. point suivant).

=== Niveau de détails des UC

Faut-il minimiser le nombre de cas d'utilisation ou au contraire détailler?
Normalement un bon diagramme des UC est indépendant de la solution, il exprime
plutôt le problème (les attentes). 

Néanmoins dans le cadre de l'enseignement en prépa comme support graphique à une analyse
fonctionnelle, pourquoi pas détailler. À ce moment-là, utiliser des stéréotypes pour différencier
les cas d'utilisation (`<<TopLevel>>` et `<<Operational>>` par exemple comme dans la documentation SysML 1.3 pp 185-186
sur le +HybridSUV+).

[NOTE]
====
La question de l'utilisation des cas d'utilisation pour exprimer les activités du système reste à trancher.
Le diagramme des activités étant tout de même plus adapté a priori (cf. <<faq>>).
Le principal défaut du diagramme <<UC1>> est surtout de mélanger des cas d'utilisations de niveaux différents. 
N'oublions pas que derrière chaque UC, il devrait y avoir un but d'une partie prenante.
====


ifdef::deckjs[]
:leveloffset: 0
endif::deckjs[]

<<<<

//===========================================================================
== Diagrammes de bloc

ifdef::deckjs[]
:leveloffset: -1
endif::deckjs[]

=== Héritage

Attention à la notion d'héritage, complexe à appréhender. On ne peut surtout pas dire :

.Erreur : Confondre héritage et propriété
[icon="images/icons/appbar.weather.thunder.png"]
[NOTE]
====
Un bloc +SarmentAttaché+ hérite des blocs +Lien+ et +SarmentNonAttaché+.
image:plantuml/bdd1.png[]
====

La relation doit pourvoir se lire "est un". Or, un +SarmentAttaché+ n'est pas un +SarmentNonAttaché+ (c'est même le contraire)!

Lorsque plusieurs blocs ont des caractéristiques en communs (propriétés, associations, comportement), il peut être utile de "factoriser" ces éléments en un bloc dont les autres vont "hériter". Quand on réalise ces liens hiérarchiques (on utilise souvent le terme "est un") en partant des blocs différents pour établir un nouveau bloc contenant les points communs on parle de *généralisation*. À l'inverse, quand on constate qu'un bloc possède réellement plusieurs déclinaisons différentes et que l'on créé alors des blocs spécifiques, on parle alors de *spécialisation*.

.Exemple de lien de généralisation/spécialisation
image::{images}/genspec.png[]

On retrouve cette association entre blocs, mais aussi entre acteurs, cas d'utilisation, etc.

.Solution
[icon="images/icons/appbar.weather.sun.png"]
[NOTE]
====
Un bloc +SarmentAttaché+ hérite du bloc +Sarment+ et possède un +Lien+.
image:plantuml/bdd2.png[]
====

=== Cardinalités

Attention aux cardinnalités indiquées dans les associations.

.Erreur : Le système est composé de 32 propulseurs!
[icon="images/icons/appbar.weather.thunder.png"]
[NOTE]
====
image:images/cardBad.png[]

Il ne s'agit pas d'une erreur de syntaxe SysML, mais d'une erreur de conception.
Un +Alistar+ est composé de 8 +Propulseurs+ et un +Propulseurs+ est composé de 4 +Propulseurs arrières+. 4*8=32.
====

.Solution possible
[icon="images/icons/appbar.weather.sun.png"]
[NOTE]
====
image:plantuml/bdd4.png[]
image:plantuml/bdd5.png[]
====

ifdef::deckjs[]
:leveloffset: 0
endif::deckjs[]


//===========================================================================
<<<<

include::sm.asc[]



//===========================================================================
<<<<

[[Conventions]]
== Conventions et recommandations

Tentative de "compilation" de bonnes conventions (à compléter et à débattre bien sûr).

ifdef::deckjs[]
:leveloffset: -1
endif::deckjs[]

=== Points de vue

- Les cas d'utilisation concernent les utilisateurs du système et non le système lui-même.
Ainsi les cas d'utilisation +Obtenir les coordonnées actuelles+ ou +Enregistrer une trace+
sont de bons cas d'utilisation d'un GPS. Alors que +Economiser la batterie+ ou +Crypter les données+
ne sont pas de bons cas. Cf. <<Utilisation>>.
- ...

=== Acteurs

- Placer les acteurs principaux à gauche (e.g., <<UC1>>)
- Placer les acteurs secondaires à droite (e.g., <<UC1>>)
- Différencier les acteurs humains (_stickman_) des autres (stéréotype `<<actor>>`) e.g., <<UC1>>
- Différencier les cas d'utilisation selon :
* leur importance (e.g., `<<Principal>>`, `<<Secondaire>>`)
* leur type (e.g., <<TopLevel>>`, `<<Operational>>`)
- ...

=== Divers

- Toujours indiquer les conditions des +loop+, +alt+, etc. dans un diagramme de séquence
- Vérifier la complétude et la non intersection des conditions des transitions sortant d'un même état.
- ...

include::faq.asc[]

//===========================================================================
<<<<

ifdef::deckjs[]
:leveloffset: 0
endif::deckjs[]

:numbered!:

== About...

**********************************************************************
Dernière MAJ : {date} - {localtime} +
Document généré par mailto:{email}[{author}] via {asciidoc} (version +8.6.8+) de 'Stuart Rackham'.
La version présentation a été générée en utilisant {deckjsite} (version +1.6.2+).
Les icônes proviennent de http://modernuiicons.com/. Diagrammes réalisés avec
{plantuml} ou {yuml}.

Ce document est libre d'utilisation et géré par la 'Licence Creative Commons'. 
ifdef::book[]
image:{images}/88x31.png[scale=30]
endif::book[]
ifndef::book[]
image:{images}/88x31.png[alt="Licence Creative  Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
endif::book[]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
**********************************************************************
