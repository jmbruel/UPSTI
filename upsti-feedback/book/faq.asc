ifdef::deckjs[]
:leveloffset: 0
endif::deckjs[]

<<<<

//===========================================================================
== FAQ

Cette _**F**requently **A**sked **Q**uestion_ regroupe les interrogations que j'ai relevée dans les discussions
que j'ai vu circuler. 

NOTE: J'en ai une plus complète également si besoin. Voir aussi cette http://www.sysmlforum.com/faq[FAQ].

ifdef::deckjs[]
:leveloffset: -1
endif::deckjs[]

=== À quoi sert un diagramme des UC avec un seul cas d'utilisation ?

image::plantuml/uc6.png[]

Tout simplement à relier les autres diagrammes à ce cas d'utilisation. Par exemple le comportement
du système, l'architecture, etc. (les solutions) pourront être reliées (`<<satisfy>>`) à ce cas.
Il faut aussi ne pas perdre de vue qu'un diagramme peut évoluer. On pourra très bien rajouter au
diagramme des cas non encore pris en compte comme +Transporter le système+, +Recycler le système+, etc.

=== Comment faut-il comprendre "interaction" dans les diagrammes d'UC ?

La définition de la norme {norme} :

[[actorsdef]]
.Définition : _Actors_ (OMG SysML v1.3, p. 123)
[icon="../images/icons/sysml.jpeg"]
[NOTE]
====
_... Actors represent classifier roles that are external to the system that may correspond to users, systems, and or other environmental entities. They may interact either directly or indirectly with the system ..._
====

Pour la comprendre il ne faut pas utiliser le Larousse français (qui rend presque le caractère réciproque obligatoire),
mais plutôt la comprendre dans son acceptation informatique (comme dans "Interaction Homme-Machine").
Par exemple un message (appel de méthode) d'un élément vers un autre dans un diagramme de séquence est appelé en SysML une _interaction_.
 
SysML permet de *préciser le caractère réciproque* ou non de l'interaction par exemple entre un +Acteur+ et un +Cas d'utilisation+ :

[[UCinter]]
.Trois types d'interaction différentes possibles en SysML
image::plantuml/uc5.png[]

=== Les "matières premières" font-elles parties des acteurs ?

On pourrait les considérer comme des acteurs en se fiant à la définition (cf. <<actorsdef,Acteurs>>)
et en les associant à des _environmental entities_.
Mais elles sont échangées avec les entités de l'environnement, ce qui n'est pas la même chose.
Autrement dit, il faut indiquer qui fournit les matières premières et qui recueille les matières produites
éventuellement en tant qu'acteurs, pas les matières elles-même, qui seront représenter comme des flux
échangés ou des blocs.
Eventuellement on peut les retrouver dans le diagramme de contexte ou encore dans un
diagramme structurel comme le diagramme de bloc interne.

[TIP]
====
Je recommande la lecture (anglaise, _sorry_) de l'excellent plaidoyer pour la mort des acteurs :
http://model-based-systems-engineering.com/tag/sysml/.
====

[WARNING]
====
Donc non, le soleil et le vent ne sont pas des acteurs!! (ni la corde, ni la raquette)
====

=== Pour l'analyse fonctionnelle : diagramme des UC ou des activités ?

Pour alimenter le débat, je renvois aux exemples donnés par {loic} lors de la journée {UPSTI}.
Voici un diagramme classique {fast} :

.Diagramme FAST
image::/Users/bruel/dev/asciidoc/sif2013/images/fast.png[]

.Représentation possible en SysML
image::/Users/bruel/dev/asciidoc/sif2013/images/sysml-fast.png[]

On pourrait croire que ces schémas sont identiques mais pas du
tout. {SysML} présente juste l'organisation du modèle et non l'arbre
d'appel. De plus, {FAST} a tendance à focaliser sur une solution unique
alors que {SysML} permet de repousser ce choix voir d'explorer des alternatives.

[[Grafcet]]
=== Comment traduire un grafcet en machine à état ?

En automatique, la notation la plus connue pour représenter la dynamique d'un système est le {grafcet}.
Il semble qu'il existe une synthèse du passage {grafcet} => diagramme d'état. J'attends de le trouver
pour l'intégrer ici.

=== Un système peut il avoir plusieurs états?

Il faut bien faire la différence entre :

- l'*état du système* (en tant qu'association de valeurs d'attributs à un instant T)
qui lui est unique à un instant donné, et 
- l'*état d'une machine à états* (en tant qu'abstraction d'un ensemble d'états au sens précédent).

.Exemple d'un système ayant plusieurs états (au sens machine à états) 
[NOTE]
====
Soit un système avec une unique variable +i+.
Les états du systèmes seraient par exemple l'ensemble des entiers naturels (positifs).
Dans une machine à état UML, on pourrait par exemple avoir l'état +pair+ et l'état +impair+.
Mais on pourrait aussi avoir, deux-sous états (+nul+ et +non-nul+) et rajouter en concurrence (+multiple de 4+ ou non, etc.).
====
